version : '3.8'
services:
  yyy-rabbitmq:
    #image: rabbitmq:3.10-management  #如果打开这个，表示按照网上镜像执行脚本执行   注意image: rabbitmq:3.10-management 执行优先于 dockerfile: dockerfile，两个只能出现一个
    container_name: yyy-rabbitmq
    # 使用 Dockerfile 构建
    build:
      context: ./rabbitmq   #如果打开这个，表示会执行目录下的dockerfile命令，但是优先执行镜像里面定义好的命令，如果和dockerfile命令相同会被覆盖掉
      dockerfile: dockerfile  #如果打开这个，表示按照dockerfile构建
    environment:
      # 控制台账号密码
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "15672:15672" # 管理界面端口
      - "5672:5672"   # api 端口
    privileged: true #给数据卷赋权限 避免启动出现Permission denied
    volumes:
      - ./rabbitmq/plugins/rabbitmq_delayed_message_exchange-3.10.2.ez:/opt/rabbitmq/plugins/rabbitmq_delayed_message_exchange-3.10.2.ez
  yyy-nacos:
    container_name: yyy-nacos
    image: nacos/nacos-server:v2.1.2-slim  #如果是window部署nacos要换成 nacos/nacos-server
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./nacos #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
    environment:
      #表示单机启动
      - MODE=standalone
      - SPRING_DATASOURCE_PLATFORM=mysql
      - MYSQL_SERVICE_HOST=yyy-mysql   #注意这个一定到换成部署mysql的ip地址或者部署的mysql名称 例如：yyy-mysql
      - MYSQL_SERVICE_PORT=3306
      - MYSQL_SERVICE_USER=root
      - MYSQL_SERVICE_PASSWORD=root
      - MYSQL_SERVICE_DB_NAME=yyy-config
      - TIME_ZONE='Asia/Shanghai'
    volumes:  #表示可以动态修改，修改外面的文件，容器内的文件也会同步修改 （像日志文件，配置文件，数据文件 都可以用挂载，方便查看日志和数据或修改配置）
      - ./nacos/logs/:/home/nacos/logs
      - ./nacos/conf/application.properties:/home/nacos/conf/application.properties
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9849:9849"
#    depends_on:  #表示app服务依赖于 yyy-redis...服务,则在启动 DockerCompose时，Compose会先启动yyy-redis...服务，等待它启动并处于运行状态后，才会启动app服务
#      - yyy-mysql
  yyy-sentinel:
    container_name: yyy-sentinel
    image: bladex/sentinel-dashboard:1.8.1
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./sentinel #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
    ports:
      - "8081:8858"
      - "8719:8719"
    environment:
      - AUTH_USERNAME=sentinel
      - AUTH_PASSWORD=sentinel
  yyy-mysql:
    container_name: yyy-mysql
    #image: mysql:8.0  #如果打开这个，表示按照网上镜像执行脚本执行
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./mysql #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile  #如果打开这个，表示按照dockerfile构建
    ports:
      - "3306:3306"
    volumes:  #表示可以动态修改，修改外面的文件，容器内的文件也会同步修改 （像日志文件，配置文件，数据文件 都可以用挂载，方便查看日志和数据或修改配置）
      - ./mysql/conf:/etc/mysql/conf.d
      - ./mysql/logs:/logs
      - ./mysql/data:/var/lib/mysql
    command: [
          'mysqld',
          '--innodb-buffer-pool-size=80M',
          '--character-set-server=utf8mb4',
          '--collation-server=utf8mb4_unicode_ci',
          '--default-time-zone=+8:00',
          '--lower-case-table-names=1'
        ]
    environment:
      MYSQL_ROOT_PASSWORD: 'root'
  yyy-redis:
    container_name: yyy-redis
    image: redis
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./redis #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
    ports:
      - "6379:6379"
    volumes:  #表示可以动态修改，修改外面的文件，容器内的文件也会同步修改 （像日志文件，配置文件，数据文件 都可以用挂载，方便查看日志和数据或修改配置）
      - ./redis/conf/redis.conf:/home/yyy/redis/redis.conf
      - ./redis/data:/data
    command: redis-server /home/yyy/redis/redis.conf
  yyy-nginx:
    container_name: yyy-nginx
    image: nginx
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./nginx #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
    ports:
      - "80:80"
    volumes:  #表示可以动态修改，修改外面的文件，容器内的文件也会同步修改 （像日志文件，配置文件，数据文件 都可以用挂载，方便查看日志和数据或修改配置）
      - ./nginx/html/dist:/home/yyy/projects/yyy-ui
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/logs:/var/log/nginx
      - ./nginx/conf.d:/etc/nginx/conf.d
#    depends_on:  #表示app服务依赖于 yyy-redis...服务,则在启动 DockerCompose时，Compose会先启动yyy-redis...服务，等待它启动并处于运行状态后，才会启动app服务
#      - yyy-gateway
#    links:
#      - yyy-gateway
  yyy-gateway:
    container_name: yyy-gateway
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/gateway #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "8080:8080"
#    depends_on:  #表示app服务依赖于 yyy-redis...服务,则在启动 DockerCompose时，Compose会先启动yyy-redis...服务，等待它启动并处于运行状态后，才会启动app服务
#      - yyy-redis
#    links:
#      - yyy-redis
  yyy-auth:
    container_name: yyy-auth
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/auth #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "9200:9200"
#    depends_on:  #表示app服务依赖于 yyy-redis...服务,则在启动 DockerCompose时，Compose会先启动yyy-redis...服务，等待它启动并处于运行状态后，才会启动app服务
#      - yyy-redis
#    links:
#      - yyy-redis
  yyy-modules-system:
    container_name: yyy-modules-system
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/modules/system #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "9201:9201"
#    depends_on:  #表示app服务依赖于 yyy-redis...服务,则在启动 DockerCompose时，Compose会先启动yyy-redis...服务，等待它启动并处于运行状态后，才会启动app服务
#      - yyy-redis
#      - yyy-mysql
#    links:
#      - yyy-redis
#      - yyy-mysql
  yyy-modules-gen:
    container_name: yyy-modules-gen
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/modules/gen #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "9202:9202"
#    depends_on:  #表示app服务依赖于 yyy-redis...服务,则在启动 DockerCompose时，Compose会先启动yyy-redis...服务，等待它启动并处于运行状态后，才会启动app服务
#      - yyy-mysql
#    links:
#      - yyy-mysql
  yyy-modules-job:
    container_name: yyy-modules-job
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/modules/job #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "9203:9203"
#    depends_on:  #表示app服务依赖于 yyy-redis...服务,则在启动 DockerCompose时，Compose会先启动yyy-redis...服务，等待它启动并处于运行状态后，才会启动app服务
#      - yyy-mysql
#    links:
#      - yyy-mysql
#  yyy-modules-file:
#    container_name: yyy-modules-file
#    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
#      context: ./yyy/modules/file #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
#      dockerfile: dockerfile
#    ports:
#      - "9300:9300"
#    volumes:
#    - ./yyy/uploadPath:/home/yyy/uploadPath
  yyy-visual-monitor:
    container_name: yyy-visual-monitor
    build:  #启动服务时，先将build中指定的dockerfile打包成镜像，再运行该镜像
      context: ./yyy/visual/monitor #指定上下文目录dockerfile所在目录[相对、绝对路径都可以]
      dockerfile: dockerfile
    ports:
      - "9100:9100"
